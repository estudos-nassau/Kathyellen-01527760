# -*- coding: utf-8 -*-
"""Atividade_ciência_dados

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Zx5XeovsJv59DXN_67bLpDdwe7lSGVi

**Exercício 1 - Aquecimento de Python para Ciência de Dados**

1. Imprima "Hello, World!" no console.
"""

print("Hello, World!")

"""2. Crie uma variável x com valor 10 e imprima seu valor."""

x = 10
print(x)

"""3. Some dois números e exiba o resultado."""

a = 5
b = 7
soma = a + b
print(soma)

"""4. Verifique se um número é par ou ímpar.

"""

numero = 10  # Altere para o número que deseja verificar

if numero % 2 == 0:
    print("O número é par.")
else:
    print("O número é ímpar.")

"""5. Crie uma função que receba dois números e retorne a soma deles."""

def soma(a, b):
    return a + b

resultado = soma(5, 7)
print(resultado)

"""6. Crie uma lista com os números de 1 a 5 e imprima-a.

"""

lista = [1, 2, 3, 4, 5]
print(lista)

"""7. Adicione o número 6 à lista criada na questão anterior.

"""

lista = [1, 2, 3, 4, 5]
lista.append(6)  # Adicionando o número 6
print(lista)

"""8. Remova o número 3 da lista."""

lista = [1, 2, 3, 4, 5, 6]
lista.remove(3)  # Removendo o número 3
print(lista)

"""9. Acesse o terceiro elemento da lista."""

lista = [1, 2, 4, 5, 6]
terceiro_elemento = lista[2]  # Índice 2 para o terceiro elemento
print(terceiro_elemento)

"""10. Imprima o tamanho da lista."""

lista = [1, 2, 4, 5, 6]
tamanho = len(lista)  # Obtendo o tamanho da lista
print(tamanho)

"""11. Crie um dicionário com informações de um carro (marca, modelo, ano)."""

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020
}

print(carro)

"""12. Acesse o valor associado à chave "marca" no dicionário."""

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020
}

marca = carro["marca"]  # Acessando o valor da chave "marca"
print(marca)

"""13. Adicione uma nova chave "cor" com valor "preto" ao dicionário."""

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020
}

carro["cor"] = "preto"  # Adicionando a nova chave "cor"
print(carro)

"""14. Verifique se a chave "modelo" existe no dicionário.

"""

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020,
    "cor": "preto"
}

if "modelo" in carro:  # Verificando se a chave "modelo" existe
    print("A chave 'modelo' existe.")
else:
    print("A chave 'modelo' não existe.")

"""15. Itere sobre as chaves do dicionário e imprima cada uma delas."""

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020,
    "cor": "preto"
}

for chave in carro:  # Iterando sobre as chaves
    print(chave)

"""15. Itere sobre as chaves do dicionário e imprima cada uma delas."""

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020,
    "cor": "preto"
}

for chave in carro:  # Iterando sobre as chaves
    print(chave)

"""17. Crie uma função que receba uma lista e retorne a soma dos elementos."""

def soma_lista(lista):
    return sum(lista)  # Retorna a soma dos elementos da lista

resultado = soma_lista([1, 2, 3, 4, 5])
print(resultado)

"""18. Crie uma função que receba um dicionário e retorne todas as suas chaves.

"""

def obter_chaves(dicionario):
    return list(dicionario.keys())  # Retorna uma lista com todas as chaves

resultado = obter_chaves({
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020,
    "cor": "preto"
})
print(resultado)

"""
19. Crie uma função que receba um dicionário e imprima chave e valor em linhas separadas."""

def imprimir_chaves_valores(dicionario):
    for chave, valor in dicionario.items():
        print(f"Chave: {chave}, Valor: {valor}")  # Imprimindo chave e valor

carro = {
    "marca": "Toyota",
    "modelo": "Corolla",
    "ano": 2020,
    "cor": "preto"
}
imprimir_chaves_valores(carro)

"""20. Crie uma classe chamada Pessoa com atributos nome e idade, e um método que imprima esses dados."""

class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def imprimir_dados(self):
        print(f"Nome: {self.nome}, Idade: {self.idade}")

# Exemplo de uso
pessoa = Pessoa("João", 30)
pessoa.imprimir_dados()